from sqlalchemy import Column, Integer, String, Boolean, DateTime, ForeignKey, Text, Float
from datetime import datetime
from enum import Enum as PyEnum
from sqlalchemy.sql import func
from models.base import Base

class ImportStatus(str, PyEnum):
    PENDING = "pending"
    PROCESSING = "processing"
    COMPLETED = "completed"
    FAILED = "failed"

class TargetList(Base):
    __tablename__ = "target_lists"
    __allow_unmapped__ = True
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, nullable=False)
    description = Column(Text, nullable=True)
    status = Column(String, default=ImportStatus.PENDING)
    total_contacts = Column(Integer, default=0)
    imported_contacts = Column(Integer, default=0)
    failed_contacts = Column(Integer, default=0)
    error_message = Column(Text, nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class TargetContact(Base):
    __tablename__ = "target_contacts"
    __allow_unmapped__ = True
    
    id = Column(Integer, primary_key=True, index=True)
    list_id = Column(Integer, ForeignKey("target_lists.id"), nullable=False)
    
    # Required fields
    voter_id = Column(String, nullable=False, index=True)
    first_name = Column(String, nullable=False)
    last_name = Column(String, nullable=False)
    zip_code = Column(String, nullable=False)
    
    # Optional fields
    address_1 = Column(String, nullable=True)
    address_2 = Column(String, nullable=True)
    city = Column(String, nullable=True)
    state = Column(String, nullable=True)
    county = Column(String, nullable=True)
    precinct = Column(String, nullable=True)
    cell_1 = Column(String, nullable=True)
    cell_2 = Column(String, nullable=True)
    cell_3 = Column(String, nullable=True)
    landline_1 = Column(String, nullable=True)
    landline_2 = Column(String, nullable=True)
    landline_3 = Column(String, nullable=True)
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
